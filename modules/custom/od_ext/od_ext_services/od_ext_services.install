<?php

/**
 * @file
 * Installation file for VotingAPI module.
 */

/**
 * Implements hook_install().
 */
function od_ext_services_install() {
  // Enable default permissions for external entities.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, [
    'access external comments',
    'post external comments',
    'view ckan external entity',
    'view solr_inventory external entity',
    'view external entity list page',
  ]);
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, [
    'access external comments',
    'edit own external comments',
    'post external comments',
    'skip external comment approval',
  ]);

  // Convert entity_id to varchar.
  od_ext_services_update_8001();

  // Fix entity field definition warnings.
  od_ext_services_update_8002();

}

/**
 * Convert entity_id to varchar from int.
 */
function od_ext_services_update_8001() {
  $tables = [
    "votingapi_result",
    "votingapi_vote",
  ];
  foreach ($tables as $table) {
    db_change_field(
      $table,
      'entity_id',
      'entity_id',
      [
        'type' => 'varchar_ascii',
        'not null' => TRUE,
        'default' => '0',
        'length' => 255,
        'description' => 'The entity_id of an entity for which the votes are compiled.',
      ]
    );
  }

}

/**
 * Fix entity field definition warnings.
 */
function od_ext_services_update_8002() {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_manager = \Drupal::service('entity_field.manager');
  $entity_schema = \Drupal::service('entity.last_installed_schema.repository');
  \Drupal::entityManager()->useCaches(FALSE);
  foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if ($entity_type_id == 'vote' ||
        $entity_type_id == 'vote_result') {
      $storage_definitions = $field_manager->getFieldStorageDefinitions($entity_type_id);
      $original_storage_definitions = $entity_schema->getLastInstalledFieldStorageDefinitions($entity_type_id);
      $update_manager->uninstallFieldStorageDefinition($original_storage_definitions['entity_id']);
      $update_manager->installFieldStorageDefinition('entity_id', $entity_type_id, $storage_definitions['entity_id']->getProvider(), $storage_definitions['entity_id']);
    }
  }
  \Drupal::entityManager()->useCaches(TRUE);

}
