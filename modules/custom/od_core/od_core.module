<?php

/**
 * @file
 * Contains od_core.module.
 */

use Drupal\Core\Database\Database;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function od_core_inline_entity_form_table_fields_alter(&$fields, $context) {
  if ($context['parent_entity_type'] == 'node' && ($context['parent_bundle'] == 'commitment')) {
    if (isset($context['field_name']) && $context['field_name'] == 'field_deliverables_paragraph') {
      unset($fields['status']);
      unset($fields['label']);
      $fields['field_title'] = [
        'type' => 'field',
        'label' => t('Title'),
        'weight' => 1,
      ];
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function od_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  $db = Database::getConnection()->driver();
  if ($db == 'pgsql') {
    // TODO: Drupal core should be handling this.
    if (!empty($view->relationship['entityqueue_relationship'])) {
      $query->getTableInfo('entity_subqueue__items')['join']->field .= '::bigint';
    }
    if (!empty($view->relationship['flag_relationship'])) {
      $query->getTableInfo('flagging_node_field_data')['join']->field .= '::bigint';
    }
    if (!empty($view->relationship['node_vote_result_vote_count'])) {
      $query->getTableInfo('votingapi_result_node_field_data')['join']->field .= '::bigint';
    }
  }
}

/**
 * Implements hook_query_TAG_alter() for comment_filter tag.
 */
function od_core_query_comment_filter_alter2(AlterableInterface $query) {
  // Change comment order to DESC for 'comment' field.
  if ($query->getMetaData('base_table') == 'comment') {
    /** @var \Drupal\Core\Database\Query\SelectInterface $query */
    $order_by = &$query->getOrderBy();
    $expression = &$query->getExpressions();

    // 'c.cid' is for flat comment lists.
    if (isset($order_by['c.cid']) && $order_by['c.cid'] == 'ASC NULLS FIRST') {
      // Reverse order.
      $order_by['c.cid'] = 'DESC';
    }

    // 'torder' is for threaded comment lists.
    if (isset($order_by['torder']) && $order_by['torder'] == 'ASC NULLS FIRST') {
      // Reverse order for parent comments.
      // And reverse order for children comments.
      // EXPLANATION of '.z':
      // The 'thread' field is string like '10.01.12f'.
      // Each part of it is generated by Number::intToAlphadecimal.
      // See core/lib/Drupal/Component/Utility/Number.php.
      // This function returns string followed by character.
      // This character is finite:
      // Maximum integer value on a 64-bit system is 9223372036854775807.
      // In higher code variable $num will be '1y2p0ij32e8e7'.
      // And variable $length will be 13. Expression ord('0') is 48.
      // Therefore first character can be 60 at maximum.
      // For reverse sorting we need to add first heavy charachter,
      // For parent comment thread string.
      // If use previous logic the character 'z' will be always heavest,
      // Than other available children thread string.
      // For each comment thread we add '.z' and sort by it.
      $expression['torder']['expression'] = 'SUBSTRING_INDEX(SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1)), \'.\', 1)';
      $order_by['torder'] = 'DESC NULLS FIRST';
      $query->addExpression('CONCAT(SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1)), \'.z\')', 'torderchild');
      $query->orderBy('torderchild', 'DESC');
    }
  }
}

/**
 * Implements hook_token_info().
 */
function od_core_token_info() {
  $info['tokens']['site']['url-abs'] = [
    'name' => t('Absolute URL'),
    'description' => t('Url of the site, no language prefix garanted'),
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function od_core_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];
  global $base_root;

  if ($type == 'site') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'url-abs':
          $replacements[$original] = $base_root;
          break;
      }
    }
  }

  return $replacements;
}
